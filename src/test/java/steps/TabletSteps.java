package steps;

import io.cucumber.java.en.Given;
import io.cucumber.java.en.When;
import io.cucumber.java.en.Then;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import pages.HomePage;
import pages.TabletCategoryPage;
import pages.ProductDetailPage;
import pages.CartPage;
import utils.DriverFactory;

import java.time.Duration;

public class TabletSteps {

    private HomePage homePage;
    private TabletCategoryPage tabletCategoryPage;
    private ProductDetailPage productDetailPage;
    private CartPage cartPage;
    private String productPrice;

    @Given("kullanÄ±cÄ± {string} sayfasÄ±na gider")
    public void kullanÄ±cÄ±_sayfasÄ±na_gider(String url) {
        if (DriverFactory.getDriver() == null) {
            System.out.println("ğŸš€ Driver NULL, yeni baÅŸlatÄ±lÄ±yor...");
            DriverFactory.setDriver("chrome");
        }

        DriverFactory.getDriver().get(url);
        homePage = new HomePage(DriverFactory.getDriver());
        System.out.println("âœ… HomePage baÅŸarÄ±yla baÅŸlatÄ±ldÄ±: " + (homePage != null));
    }

    @When("tÃ¼m Ã§erezleri kabul eder")
    public void cerezleri_kabul_eder() {
        homePage.acceptCookiesIfVisible();
    }

    @When("kullanÄ±cÄ± Tablet kategorisine geÃ§er")
    public void kullanÄ±cÄ±_kategorisine_geÃ§er() {
        if (homePage == null) {
            throw new RuntimeException("ğŸš¨ HomePage NULL! Sayfa yÃ¼klenmemiÅŸ olabilir.");
        }
        tabletCategoryPage = homePage.goToTabletCategory();
    }

    @When("kullanÄ±cÄ± Marka filtresinden Apple seÃ§imini yapar")
    public void kullanÄ±cÄ±_marka_filtresinden_seÃ§imini_yapar() {
        if (tabletCategoryPage == null) {
            throw new RuntimeException("ğŸš¨ TabletCategoryPage NULL! Kategoriye geÃ§iÅŸte hata olabilir.");
        }
        tabletCategoryPage.filterByBrand();
    }

    @When("kullanÄ±cÄ± Ekran Boyutu filtresinden 13,2inÃ§ seÃ§imini yapar")
    public void kullanÄ±cÄ±_ekran_boyutu_filtresinden_seÃ§imini_yapar() {
        if (tabletCategoryPage == null) {
            throw new RuntimeException("ğŸš¨ TabletCategoryPage NULL! Kategoriye geÃ§iÅŸte hata olabilir.");
        }
        tabletCategoryPage.filterByScreenSize();
    }

    @When("kullanÄ±cÄ± sÄ±ralama filtresi kullanÄ±lmadan Ã§Ä±kan sonuÃ§lardan en yÃ¼ksek fiyatlÄ± Ã¼rÃ¼nÃ¼ seÃ§er")
    public void kullanÄ±cÄ±_sÄ±ralama_filtresi_kullanÄ±lmadan_Ã§Ä±kan_sonuÃ§lardan_en_yÃ¼ksek_fiyatlÄ±_Ã¼rÃ¼nÃ¼_seÃ§er() {
        if (tabletCategoryPage == null) {
            throw new RuntimeException("ğŸš¨ TabletCategoryPage NULL! Kategoriye geÃ§iÅŸte hata olabilir.");
        }

        productDetailPage = tabletCategoryPage.selectHighestPricedProduct();
        productPrice = productDetailPage.getProductPrice();

        System.out.println("ğŸ“Œ SeÃ§ilen Ã¼rÃ¼n fiyatÄ±: " + productPrice);
    }

    @When("kullanÄ±cÄ± Ã¼rÃ¼n detay sayfasÄ±ndaki sepete ekle butonuna tÄ±klar")
    public void kullanÄ±cÄ±_Ã¼rÃ¼n_detay_sayfasÄ±ndaki_butonuna_tÄ±klar() {
        if (productDetailPage == null) {
            throw new RuntimeException("ğŸš¨ ProductDetailPage NULL! ÃœrÃ¼n detay sayfasÄ± aÃ§Ä±lmamÄ±ÅŸ olabilir.");
        }

        // Sepete ekleme iÅŸlemi
        cartPage = productDetailPage.addToCart();

        if (cartPage == null) {
            throw new RuntimeException("ğŸš¨ Sepete ekleme baÅŸarÄ±sÄ±z oldu, CartPage NULL dÃ¶ndÃ¼!");
        }

        System.out.println("âœ… ÃœrÃ¼n sepete baÅŸarÄ±yla eklendi ve CartPage aÃ§Ä±ldÄ±.");
    }

    @Then("sepetteki Ã¼rÃ¼n, Ã¼rÃ¼n detay sayfasÄ±ndaki fiyat ile aynÄ± olmalÄ±dÄ±r")
    public void sepetteki_Ã¼rÃ¼n_Ã¼rÃ¼n_detay_sayfasÄ±ndaki_fiyat_ile_aynÄ±_olmalÄ±dÄ±r() {
        try {
            // Sepet sayfasÄ±nÄ±n aÃ§Ä±ldÄ±ÄŸÄ±nÄ± doÄŸrula
            if (cartPage == null) {
                System.out.println("âš  CartPage NULL geldi, tekrar oluÅŸturuluyor...");
                cartPage = new CartPage(DriverFactory.getDriver());
            }

            // Bekleme ekleyelim, sayfanÄ±n tam yÃ¼klendiÄŸinden emin olalÄ±m
            WebDriverWait wait = new WebDriverWait(DriverFactory.getDriver(), Duration.ofSeconds(15));
            wait.until(ExpectedConditions.urlContains("checkout.hepsiburada.com"));

            // Sepetteki Ã¼rÃ¼nÃ¼n fiyatÄ±nÄ± al
            String cartPrice = cartPage.getCartProductPrice();
            System.out.println("ğŸ“Œ Sepetteki Ã¼rÃ¼n fiyatÄ±: " + cartPrice);

            // **FiyatlarÄ± normalleÅŸtirelim**
            String formattedCartPrice = normalizePrice(cartPrice);
            String formattedProductPrice = normalizePrice(productPrice);

            System.out.println("ğŸ“Œ NormalleÅŸtirilmiÅŸ Sepet FiyatÄ±: " + formattedCartPrice);
            System.out.println("ğŸ“Œ NormalleÅŸtirilmiÅŸ ÃœrÃ¼n Detay FiyatÄ±: " + formattedProductPrice);

            // ÃœrÃ¼n fiyatÄ±yla karÅŸÄ±laÅŸtÄ±r
            Assert.assertEquals(formattedCartPrice, formattedProductPrice, "ğŸš¨ Fiyatlar uyuÅŸmuyor!");
            System.out.println("âœ… Sepetteki Ã¼rÃ¼n fiyatÄ± doÄŸrulandÄ±.");

        } catch (Exception e) {
            System.out.println("ğŸš¨ CartPage kontrol edilirken hata oluÅŸtu: " + e.getMessage());
            throw new RuntimeException("CartPage yÃ¼klenirken hata oluÅŸtu!");
        }
    }

    // **FiyatlarÄ± normalize eden metot**
    private String normalizePrice(String price) {
        if (price == null || price.isEmpty()) {
            return "0";
        }
        return price.replaceAll("[^0-9,]", "") // TL, boÅŸluk vb. kaldÄ±r
                .replace(",", ".") // VirgÃ¼lÃ¼ noktaya Ã§evir
                .trim();
    }
}
