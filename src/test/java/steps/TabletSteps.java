package steps;

import factory.PageObjectFactory;
import io.cucumber.java.Before;
import io.cucumber.java.en.Given;
import io.cucumber.java.en.When;
import io.cucumber.java.en.Then;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;
import org.testng.Assert;
import pages.CartPage;
import pages.HomePage;
import pages.ProductDetailPage;
import pages.TabletCategoryPage;
import utils.DriverFactory;
import java.time.Duration;

public class TabletSteps {
    private WebDriver driver;
    private PageObjectFactory pageFactory;
    private HomePage homePage;
    private TabletCategoryPage tabletCategoryPage;
    private ProductDetailPage productDetailPage;
    private CartPage cartPage;
    private String productPrice;

    @Before
    public void setUp() {
        if (DriverFactory.getDriver() == null) {
            DriverFactory.setDriver("chrome"); // VarsayÄ±lan olarak Chrome baÅŸlat
        }
        this.driver = DriverFactory.getDriver();
        this.pageFactory = new PageObjectFactory(driver);
    }

    @Given("kullanÄ±cÄ± {string} sayfasÄ±na gider")
    public void kullanÄ±cÄ±_sayfasÄ±na_gider(String url) {
        driver.get(url);
        homePage = pageFactory.getHomePage();
    }

    @When("tÃ¼m Ã§erezleri kabul eder")
    public void cerezleri_kabul_eder() {
        homePage.acceptCookiesIfVisible();
    }

    @When("kullanÄ±cÄ± Tablet kategorisine geÃ§er")
    public void kullanÄ±cÄ±_kategorisine_geÃ§er() {
        tabletCategoryPage = homePage.goToTabletCategory();
    }

    @When("kullanÄ±cÄ± Marka filtresinden Apple seÃ§imini yapar")
    public void kullanÄ±cÄ±_marka_filtresinden_seÃ§imini_yapar() {
        tabletCategoryPage.filterByBrand();
    }

    @When("kullanÄ±cÄ± Ekran Boyutu filtresinden 13,2 inÃ§ seÃ§imini yapar")
    public void kullanÄ±cÄ±_ekran_boyutu_filtresinden_seÃ§imini_yapar() {
        tabletCategoryPage.filterByScreenSize();
    }

    @When("kullanÄ±cÄ± sÄ±ralama filtresi kullanÄ±lmadan Ã§Ä±kan sonuÃ§lardan en yÃ¼ksek fiyatlÄ± Ã¼rÃ¼nÃ¼ seÃ§er")
    public void kullanÄ±cÄ±_sÄ±ralama_filtresi_kullanÄ±lmadan_Ã§Ä±kan_sonuÃ§lardan_en_yÃ¼ksek_fiyatlÄ±_Ã¼rÃ¼nÃ¼_seÃ§er() {
        productDetailPage = tabletCategoryPage.selectHighestPricedProduct();
        productPrice = productDetailPage.getProductPrice();
    }

    @When("kullanÄ±cÄ± Ã¼rÃ¼n detay sayfasÄ±ndaki sepete ekle butonuna tÄ±klar")
    public void kullanÄ±cÄ±_Ã¼rÃ¼n_detay_sayfasÄ±ndaki_butonuna_tÄ±klar() {
        cartPage = productDetailPage.addToCart();
    }

    @Then("sepetteki Ã¼rÃ¼n, Ã¼rÃ¼n detay sayfasÄ±ndaki fiyat ile aynÄ± olmalÄ±dÄ±r")
    public void sepetteki_Ã¼rÃ¼n_Ã¼rÃ¼n_detay_sayfasÄ±ndaki_fiyat_ile_aynÄ±_olmalÄ±dÄ±r() {
        WebDriverWait wait = new WebDriverWait(driver, Duration.ofSeconds(15));
        wait.until(ExpectedConditions.urlContains("checkout.hepsiburada.com"));
        String cartPrice = cartPage.getCartProductPrice();
        Assert.assertEquals(cartPrice, productPrice, "ğŸš¨ Fiyatlar uyuÅŸmuyor!");
    }
}
